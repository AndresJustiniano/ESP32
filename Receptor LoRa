#include <WiFi.h>
#include <LoRaWan_APP.h>
#include <Arduino_MQTT_Client.h>
#include <ThingsBoard.h>

// Configuración WiFi
#define WIFI_SSID "SSID_WIFI"
#define WIFI_PASSWORD "PASSWORD_WIFI"

// Configuración ThingsBoard
#define TOKEN "ACCESS_TOKEN"
#define THINGSBOARD_SERVER "demo.thingsboard.io"
#define MAX_MESSAGE_SIZE 512

// Configuración LoRa
#define RF_FREQUENCY 915000000
#define TX_OUTPUT_POWER 14

#define LORA_BANDWIDTH 0
#define LORA_SPREADING_FACTOR 7
#define LORA_CODINGRATE 1
#define LORA_PREAMBLE_LENGTH 8
#define LORA_SYMBOL_TIMEOUT 0
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON false

#define BUFFER_SIZE 64

// Variables globales
WiFiClient espClient;
Arduino_MQTT_Client mqttClient(espClient);
ThingsBoard tb(mqttClient, MAX_MESSAGE_SIZE);

char rxPacket[BUFFER_SIZE];
char txPacket[BUFFER_SIZE]; // Buffer para transmisión

float voltage = 0.0;
float current = 0.0;
float signal = 0.0;
int relayStatus = 0; // 1 (encendido), 0 (apagado)
float power = 0.0;
float consumption = 0.0;

unsigned long lastPowerUpdate = 0;
unsigned long lastDataUpdate = 0;

static RadioEvents_t RadioEvents;

// Prototipos
void sendRelayInstructionToA();
void resetLoRaReception();

void setup() {
  Serial.begin(115200);
  Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);

  // Conexión WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado a WiFi");

  // Inicializar ThingsBoard con MQTT
  mqttClient.setId(TOKEN);
  mqttClient.setUsernamePassword(TOKEN, nullptr);

  if (!mqttClient.connect(THINGSBOARD_SERVER, 1883)) {
    Serial.println("Error al conectar con el servidor MQTT");
  } else {
    Serial.println("Conexión exitosa al servidor MQTT");
    setupRPC(); // Configurar callbacks para recibir comandos RPC
  }

  // Configurar LoRa
  RadioEvents.TxDone = OnTxDone;
  RadioEvents.RxDone = OnRxDone;
  Radio.Init(&RadioEvents);

  Radio.SetChannel(RF_FREQUENCY);
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    0, LORA_PREAMBLE_LENGTH, LORA_SYMBOL_TIMEOUT,
                    LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0, LORA_IQ_INVERSION_ON, true);
  Radio.Rx(0); // Iniciar en modo recepción
}

void loop() {
  // Actualizar datos a ThingsBoard
  unsigned long currentTime = millis();

  if (currentTime - lastDataUpdate >= 5000) {
    lastDataUpdate = currentTime;

    tb.sendTelemetryData("Voltage", String(voltage));
    tb.sendTelemetryData("Current", String(current));
    tb.sendTelemetryData("Signal", String(signal));
    tb.sendTelemetryData("RelayStatus", relayStatus); // Enviar como entero

    Serial.printf("Datos enviados a ThingsBoard:\nVoltage: %.2f, Current: %.2f, Signal: %.2f, Relay: %d\n",
                  voltage, current, signal, relayStatus);
  }

  // Calcular y enviar potencia y consumo cada 10 segundos
  if (currentTime - lastPowerUpdate >= 10000) {
    lastPowerUpdate = currentTime;

    power = voltage * current;
    consumption += power * (10.0 / 3600.0); // kWh aproximado

    tb.sendTelemetryData("Power", String(power));
    tb.sendTelemetryData("Consumption", String(consumption));

    Serial.printf("Potencia: %.2f W, Consumo acumulado: %.2f kWh\n", power, consumption);
  }

  tb.loop(); // Mantener conexión con ThingsBoard
}

void OnTxDone() {
  Serial.println("Transmisión completada.");
}

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
  payload[size] = '\0'; // Finalizar string
  String receivedData = String((char *)payload);

  Serial.printf("Paquete recibido: %s\n", receivedData.c_str());

  // Parsear datos recibidos
  if (sscanf(receivedData.c_str(), "V:%f,C:%f,S:%f,R:%d", &voltage, &current, &signal, &relayStatus) == 4) {
    Serial.printf("Datos parseados: Voltage=%.2f, Current=%.2f, Signal=%.2f, Relay=%d\n",
                  voltage, current, signal, relayStatus);
  } else {
    Serial.println("Error al parsear los datos recibidos.");
  }
}

// Función para procesar cambios en el estado del relé desde ThingsBoard
void processRelayCommand(int command) {
  if (command == 1 || command == 0) {
    relayStatus = command;

    // Enviar instrucción al módulo A
    sendRelayInstructionToA();

    // Reanudar recepción LoRa después de 5 segundos
    delay(5000);
    resetLoRaReception();
  }
}

// Callback para recibir datos desde ThingsBoard
void onRelayControlReceived(const RPC_Response &response) {
  if (response.key == "RelayControl") {
    int command = response.value.toInt();
    processRelayCommand(command);
  }
}

// Configurar el callback para RPC en el setup
void setupRPC() {
  tb.subscribeRPC("RelayControl", onRelayControlReceived);
}

// Función para enviar instrucción al módulo A
void sendRelayInstructionToA() {
  snprintf(txPacket, BUFFER_SIZE, "RELAY:%d", relayStatus);

  // Interrumpir recepción de datos y enviar comando al módulo A
  Radio.Standby();
  Radio.Send((uint8_t *)txPacket, strlen(txPacket));
  Serial.printf("Comando enviado al módulo A: %s\n", txPacket);
}

// Función para reanudar recepción de datos LoRa
void resetLoRaReception() {
  Serial.println("Reanudando recepción de datos LoRa...");
  Radio.Rx(0); // Volver a modo recepción
}


