#include "WiFi.h"
#include "Arduino.h"
#include "PubSubClient.h"
#include "LoRaWan_APP.h"
#include "ThingsBoard.h"

// Configuración Wi-Fi
const char* ssid = "flia justiniano";      // Cambia por tu SSID
const char* password = "19662019";         // Cambia por tu contraseña Wi-Fi

// Configuración LoRa
#define RF_FREQUENCY 915000000  // Frecuencia LoRa
#define TX_OUTPUT_POWER 14

#define LORA_BANDWIDTH 0
#define LORA_SPREADING_FACTOR 7
#define LORA_CODINGRATE 1
#define LORA_PREAMBLE_LENGTH 8
#define LORA_SYMBOL_TIMEOUT 0
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON false

#define RX_TIMEOUT_VALUE 1000
#define BUFFER_SIZE 30 // Define el tamaño del paquete

char txpacket[BUFFER_SIZE];
char rxpacket[BUFFER_SIZE];

static RadioEvents_t RadioEvents;

int16_t txNumber;
int16_t rssi, rxSize;
bool lora_idle = true;  // Variable para controlar el estado de LoRa

// Variables para almacenar los datos de LoRa recibidos
float voltage = 0.0;
float current = 0.0;
float sonda = 0.0;
float temperature = 0.0;  // Nueva variable para la temperatura
float humidity = 0.0;     // Nueva variable para la humedad

// Variables de prueba para enviar a ThingsBoard
float testVoltage = 0.0;   // Variable para el voltaje recibido
float testCurrent = 0.0;    // Variable para la corriente recibida
float testSonda = 0.0;      // Variable para la sonda recibida
float testTemperature = 0.0;  // Nueva variable de prueba para temperatura
float testHumidity = 0.0;     // Nueva variable de prueba para humedad

// Variables para la potencia y consumo
float power = 0.0;         // Potencia en W
float consumption = 0.0;    // Consumo en Wh
unsigned long lastPowerCalcTime = 0;
const unsigned long powerCalcInterval = 5000; // 5 segundos

// Configuración ThingsBoard MQTT
const char* mqtt_server = "mqtt.thingsboard.cloud";
const int mqtt_port = 1883;
const char* access_token = "rc88vfEsTpS0TgW1MD8t"; // Cambia por tu token de ThingsBoard


// Configuración Cedalo MQTT
const char* cedalo_host = "pf-ij2bkvcv06wu0l1enbgp.cedalo.cloud";
const int cedalo_port = 1883;
const char* cedalo_user = "usuario";                                  // Usuario para Cedalo
const char* cedalo_password = "12345Asd";                             // Contraseña para Cedalo
const char* cedalo_topic = "esp32/data"; // Tópico al que enviar los datos



// Configuración clientes MQTT
WiFiClient espClientThingsBoard;
WiFiClient espClientCedalo;
PubSubClient client(espClientThingsBoard);
PubSubClient cedaloClient(espClientCedalo);

// Función de inicialización Wi-Fi
void setup_wifi() {
    Serial.println("Conectando a WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\nWiFi conectado");
    Serial.print("Dirección IP: ");
    Serial.println(WiFi.localIP());
}

// Función de reconexión MQTT (ThingsBoard)
void reconnectThingsBoard() {
    while (!client.connected()) {
        Serial.print("Conectando a MQTT ThingsBoard...");
        if (client.connect("ESP32Heltec", access_token, NULL)) {
            Serial.println("Conectado a ThingsBoard");
        } else {
            Serial.print("Falló, rc=");
            Serial.println(client.state());
            delay(5000); // Intentar cada 5 segundos si no se conecta
        }
    }
}

// Función de reconexión MQTT (Cedalo)
void reconnectCedalo() {
    while (!cedaloClient.connected()) {
        Serial.print("Conectando a MQTT Cedalo...");
        if (cedaloClient.connect("usuario", cedalo_user, cedalo_password )) {
            Serial.println("Conectado a Cedalo");
        } else {
            Serial.print("Falló, rc=");
            Serial.println(cedaloClient.state());
            delay(5000); // Intentar cada 5 segundos si no se conecta
        }
    }
}

// Función para enviar los datos a ThingsBoard y Cedalo
void sendData() {
    // Crear el payload JSON con los datos de LoRa
    String telemetryPayload = "{\"voltage\": " + String(testVoltage, 2) +
                              ", \"current\": " + String(testCurrent, 2) +
                              ", \"sonda\": " + String(testSonda, 2) +
                              ", \"temperature\": " + String(testTemperature, 2) +
                              ", \"humidity\": " + String(testHumidity, 2) +
                              ", \"power\": " + String(power, 2) + 
                              ", \"consumption\": " + String(consumption, 2) + "}";

    // Crear el payload JSON con los datos de LoRa (para Atributos)
    String attributesPayload = "{\"voltage\": " + String(testVoltage, 2) +
                               ", \"current\": " + String(testCurrent, 2) +
                               ", \"sonda\": " + String(testSonda, 2) +
                               ", \"temperature\": " + String(testTemperature, 2) +
                               ", \"humidity\": " + String(testHumidity, 2) +
                               ", \"power\": " + String(power, 2) + 
                               ", \"consumption\": " + String(consumption, 2) + "}";



    // Enviar la Telemetría a ThingsBoard
    if (client.publish("v1/devices/me/telemetry", telemetryPayload.c_str())) {
        Serial.println("Telemetría enviada a ThingsBoard");
    } else {
        Serial.println("Error al enviar Telemetría a ThingsBoard");
    }

    // Enviar los Atributos a ThingsBoard
    if (client.publish("v1/devices/me/attributes", attributesPayload.c_str())) {
        Serial.println("Atributos enviados a ThingsBoard");
    } else {
        Serial.println("Error al enviar Atributos a ThingsBoard");
    }
    // Enviar los datos a Cedalo
    if (cedaloClient.publish(cedalo_topic, telemetryPayload.c_str())) {
        Serial.println("Datos enviados a Cedalo");
    } else {
        Serial.println("Error al enviar datos a Cedalo");
    }

    delay(4000);
}

// Función de inicialización
void setup() {
    Serial.begin(115200);
    Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);

    // Inicializar Wi-Fi
    setup_wifi();

    // Configurar MQTT para ThingsBoard
    client.setServer(mqtt_server, mqtt_port);

    // Configurar MQTT para Cedalo
    cedaloClient.setServer(cedalo_host, cedalo_port);

    // Configuración de LoRa
    RadioEvents.RxDone = OnRxDone;
    Radio.Init(&RadioEvents);
    Radio.SetChannel(RF_FREQUENCY);
    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                       LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                       LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                       0, true, 0, 0, LORA_IQ_INVERSION_ON, true);
}

// Bucle principal
void loop() {
    // Conectar o reconectar a ThingsBoard y Cedalo
    if (!client.connected()) {
        reconnectThingsBoard();
    }
    if (!cedaloClient.connected()) {
        reconnectCedalo();
    }

    // Procesar mensajes MQTT
    client.loop();
    cedaloClient.loop();

    // Enviar los datos de LoRa a ThingsBoard y Cedalo si la conexión MQTT está activa
    if (client.connected() && cedaloClient.connected()) {
        sendData();
    } else {
        Serial.println("No se pudo conectar a los brokers MQTT. Intentando nuevamente...");
    }

    // Si LoRa está inactivo, entra en modo RX
    if (lora_idle) {
        lora_idle = false;
        Serial.println("Modo RX activado...");
        Radio.Rx(0); // Inicia la recepción
    }

    // Asegúrate de que las interrupciones LoRa se procesen correctamente
    Radio.IrqProcess();

    // Calcular potencia y consumo cada 5 segundos
    unsigned long currentTime = millis();
    if (currentTime - lastPowerCalcTime >= powerCalcInterval) {
        lastPowerCalcTime = currentTime;

        // Calcular la potencia en W (Voltaje * Corriente)
        power = testVoltage * testCurrent;

        // Calcular el consumo en Wh (Potencia * tiempo en horas)
        consumption += (power * (powerCalcInterval / 1000.0)) / 3600.0;  // En Wh

        // Mostrar en el monitor serial
        Serial.printf("Potencia: %.2f W, Consumo: %.2f Wh\n", power, consumption);
    }
}

// Función que maneja los paquetes recibidos
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
    rssi = rssi;
    rxSize = size;
    memcpy(rxpacket, payload, size);
    rxpacket[size] = '\0';  // Finaliza el string correctamente
    Radio.Sleep();  // Pone el radio en modo de bajo consumo después de recibir

    // Imprimir el mensaje recibido
    Serial.printf("\r\nPaquete recibido: \"%s\" con RSSI: %d, longitud: %d\r\n", rxpacket, rssi, rxSize);

    // Intentar parsear los datos
    if (sscanf(rxpacket, "V:%f,C:%f,S:%f,T:%f,H:%f", &testVoltage, &testCurrent, &testSonda, &testTemperature, &testHumidity) == 5) {
        // Si el parseo es exitoso, imprimir los valores
        Serial.printf("Datos parseados:\nVoltage=%.2f V\nCurrent=%.2f A\nSonda=%.2f\n", testVoltage, testCurrent, testSonda);
    } else {
        // Si el parseo falla, imprimir un mensaje de error
        Serial.println("Error al parsear los datos recibidos.");
    }

    lora_idle = true;  // Cambia el estado a inactivo, permitiendo que LoRa reciba el siguiente paquete
}


